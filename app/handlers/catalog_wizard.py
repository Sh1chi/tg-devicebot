from aiogram import Router, types, F
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardButton

from .. import models, keyboards, config, logger

router = Router()
log = logger.logging.getLogger(__name__)


class Catalog(StatesGroup):
    choosing_model   = State()
    choosing_storage = State()
    choosing_color   = State()


@router.callback_query(F.data == "show_catalog")
async def wizard_entry(c: types.CallbackQuery, state: FSMContext) -> None:
    await state.clear()
    await state.set_state(Catalog.choosing_model)
    await send_model_step(c.message, page=0)
    await c.answer()


async def send_model_step(msg: types.Message, page: int) -> None:
    models_list = await models.distinct_models()
    kb, page = keyboards.paged_kb(models_list, page, prefix="model")

    # ‚îÄ‚îÄ‚îÄ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—É—á–∏–ª–∏ InlineKeyboardMarkup, –¥–æ–ø–æ–ª–Ω–∏–º –µ—ë:
    if page == 0:
        # –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
        kb.inline_keyboard.append([
            InlineKeyboardButton(text="‚è© –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å—ë", callback_data="show_all")
        ])

    await msg.edit_text("üì± *–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:*", reply_markup=kb)


@router.callback_query(
    Catalog.choosing_model,                    # <‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    F.data.startswith("model:")               # <‚Äî —Ñ–∏–ª—å—Ç—Ä –Ω–∞ callback_data
)
async def model_chosen(c: types.CallbackQuery, state: FSMContext) -> None:
    model = c.data.split(":", 1)[1]
    await state.update_data(model=model)
    await state.set_state(Catalog.choosing_storage)
    await send_storage_step(c.message, model)
    await c.answer()


async def send_storage_step(msg: types.Message, model: str) -> None:
    sizes = await models.distinct_storages(model)
    kb = keyboards.simple_kb(sizes, prefix="storage", back_cb="back:models")
    await msg.edit_text(f"üíæ *–ü–∞–º—è—Ç—å –¥–ª—è {model}:*", reply_markup=kb)


@router.callback_query(
    Catalog.choosing_storage,
    F.data.startswith("storage:")
)
async def storage_chosen(c: types.CallbackQuery, state: FSMContext) -> None:
    storage = int(c.data.split(":", 1)[1])
    await state.update_data(storage=storage)
    data = await state.get_data()
    await state.set_state(Catalog.choosing_color)
    await send_color_step(c.message, data["model"], storage)
    await c.answer()


async def send_color_step(msg: types.Message, model: str, storage: int) -> None:
    colors = await models.distinct_colors(model, storage)
    kb = keyboards.simple_kb(colors, prefix="color", back_cb="back:storages")
    await msg.edit_text(f"üé® *–¶–≤–µ—Ç* {storage} GB, {model}:", reply_markup=kb)


@router.callback_query(
    Catalog.choosing_color,
    F.data.startswith("color:")
)
async def color_chosen(c: types.CallbackQuery, state: FSMContext) -> None:
    color = c.data.split(":", 1)[1]
    data = await state.update_data(color=color)
    phone = await models.get_phone_by_attrs(**data)
    await state.clear()
    await keyboards.send_product_card(c.message, phone, delete_prev=True)
    await models.add_user_phone(c.from_user.id, phone["id"])
    await c.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")


@router.callback_query(Catalog.choosing_storage, F.data == "back:models")
async def back_to_models(c: types.CallbackQuery, state: FSMContext):
    await state.set_state(Catalog.choosing_model)
    await send_model_step(c.message, page=0)
    await c.answer()


@router.callback_query(Catalog.choosing_color, F.data == "back:storages")
async def back_to_storages(c: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await state.set_state(Catalog.choosing_storage)
    await send_storage_step(c.message, data["model"])
    await c.answer()


@router.callback_query(F.data == "show_all")
async def show_full_catalog(c: types.CallbackQuery, state: FSMContext) -> None:
    # –≤—ã—Ö–æ–¥–∏–º –∏–∑ –º–∞—Å—Ç–µ—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥
    await state.clear()
    kb = await keyboards.catalog_kb()
    await c.message.edit_text(
        "–í–æ—Ç —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Å–µ–π—á–∞—Å:",
        reply_markup=kb,
    )
    await c.answer()