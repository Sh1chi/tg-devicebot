from __future__ import annotations
import asyncio
from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardButton

from .. import models, keyboards, logger, config

router = Router()
log = logger.logging.getLogger(__name__)

ADMINS = set(config.ADMIN_IDS)


class BC(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ /broadcast."""
    choosing_audience = State()
    typing_text       = State()
    waiting_photo     = State()
    confirming        = State()


@router.message(F.text == "/broadcast")
async def broadcast_entry(m: types.Message, state: FSMContext):
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Ä–∞—Å—Å—ã–ª–∫—É: –≤—ã–±–æ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏."""
    if m.from_user.id not in ADMINS:
        log.warning("User %s (%s) tried to use /broadcast", m.from_user.id, m.from_user.username)
        return

    log.info("Admin %s (%s) opened broadcast menu", m.from_user.id, m.from_user.username)

    await state.clear()
    await state.update_data(selected_models=[])

    kb = await build_audience_kb([])
    await m.answer("–ö–æ–º—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?", reply_markup=kb)
    await state.set_state(BC.choosing_audience)


async def build_audience_kb(selected: list[str]) -> types.InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏."""
    models_list = await models.distinct_models()
    builder = keyboards.InlineBuilderOneColumn()

    builder.add(InlineKeyboardButton(text="üì¢ –í—Å–µ–º", callback_data="aud:all"))

    for mdl in models_list:
        prefix = "‚úÖ " if mdl in selected else "‚ñ´Ô∏è "
        builder.add(InlineKeyboardButton(text=prefix + mdl, callback_data=f"tgl:{mdl}"))
    builder.add(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="aud:next"))

    return builder.as_markup()


@router.callback_query(BC.choosing_audience, F.data.startswith("tgl:"))
async def toggle_model(c: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –≤ —Å–ø–∏—Å–∫–µ."""
    model = c.data[4:]
    data = await state.get_data()
    selected = data.get("selected_models", [])
    if model in selected:
        selected.remove(model)
    else:
        selected.append(model)
    await state.update_data(selected_models=selected)
    kb = await build_audience_kb(selected)
    await c.message.edit_reply_markup(reply_markup=kb)
    await c.answer()


@router.callback_query(BC.choosing_audience, F.data == "aud:all")
async def choose_all(c: types.CallbackQuery, state: FSMContext):
    """–í—ã–±—Ä–∞–Ω–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è: –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏."""
    await state.update_data(audience="all", selected_models=[])
    await state.set_state(BC.typing_text)
    await c.message.edit_text("üì¢ *–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.*\n\n‚úèÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:",
                              parse_mode="Markdown")
    await c.answer()


@router.callback_query(BC.choosing_audience, F.data == "aud:next")
async def audience_next(c: types.CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–µ–π."""
    data = await state.get_data()
    models_sel = data.get("selected_models", [])
    if not models_sel:
        await c.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –º–æ–¥–µ–ª—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´üì¢ –í—Å–µ–º¬ª.", show_alert=True)
        return
    await state.update_data(audience="selected")
    await state.set_state(BC.typing_text)
    pretty = ", ".join(models_sel)
    await c.message.edit_text(
        f"üì¢ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–≤—à–∏–º—Å—è:* {pretty}\n\n"
        "‚úèÔ∏è –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:",
        parse_mode="Markdown"
    )
    await c.answer()


@router.message(BC.typing_text, F.text)
async def txt_received(m: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏, –æ–∂–∏–¥–∞–Ω–∏–µ —Ñ–æ—Ç–æ –∏–ª–∏ skip."""
    await state.update_data(text=m.text)
    await state.set_state(BC.waiting_photo)
    await m.answer("üñº –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∞ ‚Äî –ø—Ä–∏—à–ª–∏—Ç–µ –µ–µ.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–æ—Ç–æ.")


@router.message(BC.waiting_photo, F.photo)
async def photo_received(m: types.Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏."""
    file_id = m.photo[-1].file_id
    await state.update_data(photo=file_id)
    await ask_confirm(m, state)


@router.message(BC.waiting_photo, F.text == "/skip")
async def skip_photo(m: types.Message, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ —Ñ–æ—Ç–æ, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é."""
    await ask_confirm(m, state)


async def ask_confirm(msg: types.Message | types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."""
    data = await state.get_data()

    builder = keyboards.InlineBuilderOneColumn()
    builder.add(InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="bc:send"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞",   callback_data="bc:cancel"))

    preview = data["text"]
    if data.get("photo"):
        await msg.answer_photo(data["photo"], caption=preview, reply_markup=builder.as_markup())
    else:
        await msg.answer(preview, reply_markup=builder.as_markup())

    await state.set_state(BC.confirming)


@router.callback_query(BC.confirming, F.data == "bc:send")
async def do_broadcast(c: types.CallbackQuery, state: FSMContext):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏."""
    data = await state.get_data()
    await c.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞!", show_alert=True)
    await state.clear()

    if data.get("audience") == "all":
        users = await models.all_user_ids()
    elif data.get("audience") == "selected":
        users = await models.user_ids_for_models(data["selected_models"])
    else:
        users = await models.user_ids_for_models([data["audience"]])


    sent, failed = 0, 0
    for uid in users:
        try:
            if data.get("photo"):
                await c.bot.send_photo(uid, data["photo"], caption=data["text"])
            else:
                await c.bot.send_message(uid, data["text"])
            sent += 1
        except Exception:
            failed += 1
        await asyncio.sleep(0.07)  # –∞–Ω—Ç–∏-—Ñ–ª—É–¥

    log.info(
        "Broadcast by %s (%s): sent=%d, failed=%d",
        c.from_user.id,
        c.from_user.username,
        sent,
        failed
    )

    await c.message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n–ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {failed}")


@router.callback_query(BC.confirming, F.data == "bc:cancel")
async def bc_cancel(c: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏."""
    await state.clear()
    await c.message.edit_text("üö´ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await c.answer()
