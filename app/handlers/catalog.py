from aiogram import Router, types, F

from .. import models, keyboards, config, logger

router = Router()
log = logger.logging.getLogger(__name__)


@router.callback_query(F.data == "show_catalog")
async def show_catalog(c: types.CallbackQuery) -> None:
    log.info("User %s opened catalog", c.from_user.id)

    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è: –±–µ—Ä—ë—Ç —Ç–æ–≤–∞—Ä—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã phones
    kb = await keyboards.catalog_kb()

    await c.message.edit_text(
        "–í–æ—Ç —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Å–µ–π—á–∞—Å:",
        reply_markup=kb,
    )
    await c.answer()


@router.callback_query(F.data.startswith("prod:"))
async def product_card(c: types.CallbackQuery) -> None:
    prod_id = c.data.split(":", 1)[1]

    # –∏—â–µ–º —Ç–æ–≤–∞—Ä –≤ –ë–î
    product = await models.get_phone(prod_id)
    if not product:
        log.error("Product %s not found (user %s)", prod_id, c.from_user.id)
        return await c.answer("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω ü§∑", show_alert=True)

    log.info('User %s requested product "%s"', c.from_user.id, product["model"])

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ç–µ—Ä–µ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await models.add_user_phone(c.from_user.id, prod_id)

    text_parts = [
        f"*{product['model']}*",
        f"–ü–∞–º—è—Ç—å: {product['storage']} GB" if product["storage"] else None,
        f"–¶–≤–µ—Ç: {product['color']}" if product["color"] else None,
        f"–¶–µ–Ω–∞: *‚ÇΩ {product['price']:,}*",
        "",
        "–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:",
        f"{config.MANAGER_CONTACT}",
    ]
    caption = "\n".join(p for p in text_parts if p is not None)

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    if product["photo"]:
        await c.message.answer_photo(
            photo=product["photo"],
            caption=caption,
            parse_mode="Markdown",
        )
        await c.message.delete()  # —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—É—é –∫–∞—Ä—Ç–æ—á–∫—É –±–µ–∑ —Ñ–æ—Ç–æ
    else:
        await c.message.edit_text(caption, parse_mode="Markdown")

    await c.answer("–ö–æ–Ω—Ç–∞–∫—Ç—ã –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
