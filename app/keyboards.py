from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Message
from . import models, config


async def catalog_kb() -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for p in await models.get_catalog():
        kb.add(
            InlineKeyboardButton(
                text = f"{p['model']} ‚Äî ‚ÇΩ {p['price']:,}",
                callback_data = f"prod:{p['id']}",
            )
        )
    return kb.as_markup()


def start_kb() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    builder.button(text="üì± –ö–∞—Ç–∞–ª–æ–≥", callback_data="show_catalog")
    return builder.as_markup()


# ‚îÄ‚îÄ‚îÄ –æ–±–ª–µ–≥—á—ë–Ω–Ω—ã–µ –ö–ë ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
def simple_kb(values: list, prefix: str, back_cb: str | None = None) -> InlineKeyboardMarkup:
    kb = InlineKeyboardBuilder()
    for v in values:
        kb.add(InlineKeyboardButton(text=str(v), callback_data=f"{prefix}:{v}"))
    if back_cb:
        kb.row(InlineKeyboardButton(text="‚óÄ –ù–∞–∑–∞–¥", callback_data=back_cb))
    return kb.as_markup()


def paged_kb(values: list, page: int, prefix: str, per_page: int = 6) -> tuple[InlineKeyboardMarkup, int]:
    pages = (len(values) - 1) // per_page + 1
    page = max(0, min(page, pages - 1))
    start, end = page * per_page, (page + 1) * per_page

    # —Ç–µ–ø–µ—Ä—å –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É
    builder = InlineKeyboardBuilder()

    for v in values[start:end]:
        builder.row(  # –∫–∞–∂–¥–∞—è –∫–Ω–æ–ø–∫–∞ ‚Äî –≤ —Å–≤–æ—ë–º —Ä—è–¥—É
            InlineKeyboardButton(text=str(v), callback_data=f"{prefix}:{v}")
        )

    # –ø–∞–≥–∏–Ω–∞—Ü–∏—è (—Ç–æ–∂–µ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É)
    nav = []
    if page > 0:
        nav.append(InlineKeyboardButton(text="‚óÄ", callback_data=f"page:{prefix}:{page-1}"))
    nav.append(InlineKeyboardButton(text=f"{page+1}/{pages}", callback_data="noop"))
    if page < pages - 1:
        nav.append(InlineKeyboardButton(text="‚ñ∂", callback_data=f"page:{prefix}:{page+1}"))
    if nav:
        # –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ row_width, —Ä–∞–∑–º–µ—Ç–∫–∞ –∏–∑ –æ–¥–Ω–æ–≥–æ .row() –±—É–¥–µ—Ç –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        builder.row(*nav)

    return builder.as_markup(), page


# ‚îÄ‚îÄ‚îÄ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def send_product_card(
    msg: Message, phone: dict, delete_prev: bool = False
) -> None:
    caption = "\n".join(
        p for p in [
            f"*{phone['model']}*",
            f"–ü–∞–º—è—Ç—å: {phone['storage']} GB" if phone["storage"] else None,
            f"–¶–≤–µ—Ç: {phone['color']}"       if phone["color"]   else None,
            f"–¶–µ–Ω–∞: *‚ÇΩ {phone['price']:,}*",
            "",
            "–ß—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º:",
            config.MANAGER_CONTACT,
        ] if p
    )
    if phone["photo"]:
        await msg.answer_photo(phone["photo"], caption=caption, parse_mode="Markdown")
    else:
        await msg.answer(caption, parse_mode="Markdown")
    if delete_prev:
        await msg.delete()

